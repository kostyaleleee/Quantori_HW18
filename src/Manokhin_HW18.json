{
	"info": {
		"_postman_id": "3f4c7169-f4ba-4c48-afe2-22acd4b52a72",
		"name": "Manokhin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26978508"
	},
	"item": [
		{
			"name": "lecture-1",
			"item": [
				{
					"name": "Session token student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Setting student token as collection variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"studentToken\", jsonData.accessToken);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{usernameStudent}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/session",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Session token teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Setting teacher token as collection variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"teacherToken\", jsonData.accessToken);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{usernameTeacher}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/session",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Session token admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Setting admin token as collection variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"adminToken\", jsonData.accessToken);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{usernameAdmin}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/session",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Happy path scenario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "No body sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Email invalid value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Invalid value\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Minimum username length is: 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage2 = \"Minimum username length is: 3\";\r",
									"    pm.expect(jsonData.errors[1].msg).to.equal(expectedErrorMessage2);\r",
									"});\r",
									"\r",
									"pm.test(\"Minimum password length is: 8\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage3 = \"Minimum password length is: 8\";\r",
									"    pm.expect(jsonData.errors[2].msg).to.equal(expectedErrorMessage3);\r",
									"});\r",
									"\r",
									"pm.test(\"Wrong role, please send the right role: student,teacher,admin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage4 = \"Wrong role, please send the right role: student,teacher,admin\";\r",
									"    pm.expect(jsonData.errors[3].msg).to.equal(expectedErrorMessage4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"role\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"There is no such endpoint\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
									"    pm.expect(jsonData.error).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username contains numeric symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(5);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": {{randomNumericsymbols}},\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username contains Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": {{$randomBoolean}},\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username left blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Minimum username length is: 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum username length is: 3\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username contains 2 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Minimum username length is: 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum username length is: 3\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(2);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomNumericsymbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username contains 3 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(3);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomNumericsymbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username contains 4 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // could lead to error if the username combination is already used\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(4);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{randomNumericsymbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username contains 254 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random254Symbols = RandomAlphanumericSymbols(254);\r",
									"\r",
									"pm.collectionVariables.set(\"254symbols\", random254Symbols);\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{254symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username contains 255 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random255Symbols = RandomAlphanumericSymbols(255);\r",
									"\r",
									"pm.collectionVariables.set(\"255symbols\", random255Symbols);\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{255symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username contains 256 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Maximum username length is: 255\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Maximum username length is: 255\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random256Symbols = RandomAlphanumericSymbols(256);\r",
									"\r",
									"pm.collectionVariables.set(\"256symbols\", random256Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{256symbols}}\",\r\n    \"firstName\": \"{{$randomBsAdjective}}\",\r\n    \"lastName\": \"{{$randomBsAdjective}}\",\r\n    \"email\": \"{{$randomAdjective}}@quantori.academy\",\r\n    \"password\": \"{{$randomPhoneNumber}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "firstName contains numeric symbols ERROR EXPECTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(5);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": {{randomNumericsymbols}},\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "firstName contains Boolean ERROR EXPECTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // there's a bug in Jira for that case\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": {{$randomBoolean}},\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "firstName left blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // field is not required, so it's ok\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "firstName contains 1 symbol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // could lead to error if the username combination is already used\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{$randomAlphaNumeric}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "firstName contains 254 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random256Symbols = RandomAlphanumericSymbols(256);\r",
									"\r",
									"pm.collectionVariables.set(\"256symbols\", random256Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{254symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "firstName contains 255 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random255Symbols = RandomAlphanumericSymbols(255);\r",
									"\r",
									"pm.collectionVariables.set(\"255symbols\", random255Symbols);\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{255symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "firstName contains 256 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Maximum username length is: 255\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Unable to create user: SequelizeDatabaseError: value too long for type character varying(255)\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random256Symbols = RandomAlphanumericSymbols(256);\r",
									"\r",
									"pm.collectionVariables.set(\"256symbols\", random256Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{256symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "lastName contains numeric symbols ERROR EXPECTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(5);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": {{randomNumericsymbols}},\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "lastName contains Boolean ERROR EXPECTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": {{$randomBoolean}},\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "lastName left blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // field is not required, so it's ok\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "lastName contains 1 symbol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // could lead to error if the username combination is already used\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{$randomAlphaNumeric}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "lastName contains 254 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random256Symbols = RandomAlphanumericSymbols(256);\r",
									"\r",
									"pm.collectionVariables.set(\"256symbols\", random256Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{254symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "lastName contains 255 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random255Symbols = RandomAlphanumericSymbols(255);\r",
									"\r",
									"pm.collectionVariables.set(\"255symbols\", random255Symbols);\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{255symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "lastName contains 256 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Maximum username length is: 255\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Unable to create user: SequelizeDatabaseError: value too long for type character varying(255)\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random256Symbols = RandomAlphanumericSymbols(256);\r",
									"\r",
									"pm.collectionVariables.set(\"256symbols\", random256Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{256symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "email contains numeric symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Invalid value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Invalid value\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(5);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": {{randomNumericsymbols}},\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "email contains Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Invalid value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Invalid value\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": {{$randomBoolean}},\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "email left blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Invalid value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Invalid value\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "email contains 1 symbol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // could be an error if the value already used\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{$randomAlphaNumeric}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "email contains 63 symbols (excluding \"@quantori.academy\")",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random63Symbols = RandomAlphanumericSymbols(63);\r",
									"\r",
									"pm.collectionVariables.set(\"63symbols\", random63Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{63symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "email contains 64 symbols (excluding \"@quantori.academy\")",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random64Symbols = RandomAlphanumericSymbols(64);\r",
									"\r",
									"pm.collectionVariables.set(\"64symbols\", random64Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{64symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "email contains 65 symbols (excluding \"@quantori.academy\")",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Invalid value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Invalid value\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random65Symbols = RandomAlphanumericSymbols(65);\r",
									"\r",
									"pm.collectionVariables.set(\"65symbols\", random65Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{65symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "password contains numeric symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Minimum password length is: 8\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum password length is: 8\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(5);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": {{randomNumericsymbols}},\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "password contains Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Minimum password length is: 8\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum password length is: 8\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": {{$randomBoolean}},\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "password left blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Minimum password length is: 8\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum password length is: 8\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "password contains 7 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"pm.test(\"Minimum password length is: 8\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum password length is: 8\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"function Random7Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random7Symbols = Random7Symbols(7);\r",
									"\r",
									"pm.collectionVariables.set(\"random7symbols\", random7Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random7symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "password contains 8 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // error is expected, there's a bug in Jira for that case\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"function Random8Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random8Symbols = Random8Symbols(8);\r",
									"\r",
									"pm.collectionVariables.set(\"random8symbols\", random8Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random8symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "password contains 9 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"function Random9Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random9Symbols = Random9Symbols(9);\r",
									"\r",
									"pm.collectionVariables.set(\"random9symbols\", random9Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random9symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "password contains 19 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = RandomAlphanumericSymbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random19Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random19Symbols = Random19Symbols(19);\r",
									"\r",
									"pm.collectionVariables.set(\"random19symbols\", random19Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random19symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "password contains 20 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = RandomAlphanumericSymbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "password contains 21 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Maximum password length is: 20\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Maximum password length is: 20\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = RandomAlphanumericSymbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"\r",
									"function Random21Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random21Symbols = Random21Symbols(21);\r",
									"\r",
									"pm.collectionVariables.set(\"random21symbols\", random21Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random21symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating \"student\" as student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating \"teacher\" as student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"teacher\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating \"admin\" as student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"This action is forbidden for role student\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"This action is forbidden for role student\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating \"student\" as teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating \"teacher\" as teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"teacher\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating \"admin\" as teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"This action is forbidden for role teacher\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"This action is forbidden for role teacher\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating \"student\" as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"student\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating \"teacher\" as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"teacher\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating \"admin\" as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "role contains special symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Wrong role, please send the right role: student,teacher,admin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Wrong role, please send the right role: student,teacher,admin\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"@@!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "role contains numeric symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Wrong role, please send the right role: student,teacher,admin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Wrong role, please send the right role: student,teacher,admin\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
									"\r",
									"\r",
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(2);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": {{randomNumericsymbols}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "role contains Cyrillic symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Wrong role, please send the right role: student,teacher,admin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Wrong role, please send the right role: student,teacher,admin\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"роль\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "role contains Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Wrong role, please send the right role: student,teacher,admin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Wrong role, please send the right role: student,teacher,admin\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": {{$randomBoolean}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "role left blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Wrong role, please send the right role: student,teacher,admin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Wrong role, please send the right role: student,teacher,admin\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function Random20Symbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = Random20Symbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{random20symbols}}\",\r\n    \"role\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // i think here we should get 403 since we are authorized, but under role that have no permission for this action\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Unauthorized\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"This action is forbidden for role student\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"This action is forbidden for role student\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"This action is forbidden for role teacher\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"This action is forbidden for role teacher\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Happy path scenario (all valid inputs)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Setting courseId as collection variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"categoryId\", jsonData.id);\r",
									"})\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random20Symbols = RandomAlphanumericSymbols(20);\r",
									"\r",
									"pm.collectionVariables.set(\"random20symbols\", random20Symbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{20symbols}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Unauthorized\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomWords}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title left blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Minimum category length is: 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum category length is: 3\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Only RU/EN alphabet, space and digits allowed, please change your request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage2 = \"Only RU/EN alphabet, space and digits allowed, please change your request\";\r",
									"    pm.expect(jsonData.errors[1].msg).to.equal(expectedErrorMessage2);\r",
									"});\r",
									"\r",
									"pm.test(\"You are not allowed to use spaces only\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage3 = \"You are not allowed to use spaces only\";\r",
									"    pm.expect(jsonData.errors[2].msg).to.equal(expectedErrorMessage3);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title contains numeric symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Only RU/EN alphabet, space and digits allowed, please change your request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage2 = \"Only RU/EN alphabet, space and digits allowed, please change your request\";\r",
									"    pm.expect(jsonData.errors[1].msg).to.equal(expectedErrorMessage2);\r",
									"});\r",
									"\r",
									"pm.test(\"You are not allowed to use spaces only\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage3 = \"You are not allowed to use spaces only\";\r",
									"    pm.expect(jsonData.errors[2].msg).to.equal(expectedErrorMessage3);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(5);\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumericsymbols\", randomNumSymbols);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": {{randomNumericsymbols}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title contains Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Only RU/EN alphabet, space and digits allowed, please change your request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage2 = \"Only RU/EN alphabet, space and digits allowed, please change your request\";\r",
									"    pm.expect(jsonData.errors[1].msg).to.equal(expectedErrorMessage2);\r",
									"});\r",
									"\r",
									"pm.test(\"You are not allowed to use spaces only\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage3 = \"You are not allowed to use spaces only\";\r",
									"    pm.expect(jsonData.errors[2].msg).to.equal(expectedErrorMessage3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": {{$randomBoolean}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title contains spaces only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"You are not allowed to use spaces only\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"You are not allowed to use spaces only\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"    \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title contains 2 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Minimum category length is: 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum category length is: 3\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title contains 3 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title contains 4 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title contains 99 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random99Symbols = RandomAlphanumericSymbols(99);\r",
									"\r",
									"pm.collectionVariables.set(\"99symbols\", random99Symbols);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{99symbols}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title contains 100 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Setting categoryId as collection variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"categoryId\", jsonData.id);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random100Symbols = RandomAlphanumericSymbols(100);\r",
									"\r",
									"pm.collectionVariables.set(\"100symbols\", random100Symbols);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{100symbols}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title contains 101 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Maximum category length is: 100\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Maximum category length is: 100\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random101Symbols = RandomAlphanumericSymbols(101);\r",
									"\r",
									"pm.collectionVariables.set(\"101symbols\", random101Symbols);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{101symbols}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(3);\r",
									"\r",
									"pm.collectionVariables.set(\"3symbols\", randomNumSymbols);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"}); \r",
									"\r",
									"pm.test(\"This action is forbidden for role student\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"This action is forbidden for role student\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"Manokhin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by teacher",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(3);\r",
									"\r",
									"pm.collectionVariables.set(\"3symbols\", randomNumSymbols);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"}); \r",
									"\r",
									"pm.test(\"This action is forbidden for role teacher\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"This action is forbidden for role teacher\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"Manokhin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"ManokhinCategory\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories without token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"ManokhinCategory\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories title left blank",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Minimum category length is: 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum category length is: 3\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Only RU/EN alphabet, space and digits allowed, please change your request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage2 = \"Only RU/EN alphabet, space and digits allowed, please change your request\";\r",
									"    pm.expect(jsonData.errors[1].msg).to.equal(expectedErrorMessage2);\r",
									"});\r",
									"\r",
									"pm.test(\"You are not allowed to use spaces only\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage3 = \"You are not allowed to use spaces only\";\r",
									"    pm.expect(jsonData.errors[2].msg).to.equal(expectedErrorMessage3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories title contains numeric symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomNumericSymbols(length) {\r",
									"  const symbols = '0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const randomNumSymbols = RandomNumericSymbols(5);\r",
									"\r",
									"pm.collectionVariables.set(\"5symbols\", randomNumSymbols);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Only RU/EN alphabet, space and digits allowed, please change your request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage2 = \"Only RU/EN alphabet, space and digits allowed, please change your request\";\r",
									"    pm.expect(jsonData.errors[1].msg).to.equal(expectedErrorMessage2);\r",
									"});\r",
									"\r",
									"pm.test(\"You are not allowed to use spaces only\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage3 = \"You are not allowed to use spaces only\";\r",
									"    pm.expect(jsonData.errors[2].msg).to.equal(expectedErrorMessage3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": {{5symbols}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories title contains Boolean",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameter should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be a string\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Only RU/EN alphabet, space and digits allowed, please change your request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage2 = \"Only RU/EN alphabet, space and digits allowed, please change your request\";\r",
									"    pm.expect(jsonData.errors[1].msg).to.equal(expectedErrorMessage2);\r",
									"});\r",
									"\r",
									"pm.test(\"You are not allowed to use spaces only\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage3 = \"You are not allowed to use spaces only\";\r",
									"    pm.expect(jsonData.errors[2].msg).to.equal(expectedErrorMessage3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": {{$randomBoolean}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories title contains 2 symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Minimum category length is: 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Minimum category length is: 3\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories title contains 3 symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories title contains 99 symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random99Symbols = RandomAlphanumericSymbols(99);\r",
									"\r",
									"pm.collectionVariables.set(\"99symbols\", random99Symbols);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"{{99symbols}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories title contains 100 symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random100Symbols = RandomAlphanumericSymbols(100);\r",
									"\r",
									"pm.collectionVariables.set(\"100symbols\", random100Symbols);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"{{100symbols}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories title contains 101 symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function RandomAlphanumericSymbols(length) {\r",
									"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
									"    result += symbols.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"const random101Symbols = RandomAlphanumericSymbols(101);\r",
									"\r",
									"pm.collectionVariables.set(\"101symbols\", random101Symbols);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Maximum category length is: 100\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Maximum category length is: 100\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{categoryId}},\r\n    \"title\": \"{{101symbols}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "CategoryById by student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/{{categoryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CategoryById by teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/{{categoryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CategoryById by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/{{categoryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CategoryById without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/{{categoryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CategoryById with non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"}); // philosophical question is it right or not, but the record is not in the system so it's ok\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Unable to find category record(s)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Unable to find category record(s)\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/55555",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"55555"
							]
						}
					},
					"response": []
				},
				{
					"name": "CategoryById id contains Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Parameter should be numeric\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be numeric\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/{{$randomBoolean}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{$randomBoolean}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CategoryById id contains Latin symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameter should be numeric\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be numeric\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/anyText",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"anyText"
							]
						}
					},
					"response": []
				},
				{
					"name": "CategoryById id contains Cyrillic symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Parameter should be numeric\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be numeric\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/категория",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"категория"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"This action is forbidden for role student\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"This action is forbidden for role student\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/33333",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"33333"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"This action is forbidden for role teacher\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"This action is forbidden for role teacher\";\r",
									"    pm.expect(jsonData.errors).to.equal(expectedErrorMessage1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/33333",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"33333"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/{{categoryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"}); \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/{{categoryId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories with non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // philosophical question is it right or not, but the record is not in the system so it's ok\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/55555",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"55555"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories contains Latin symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameter should be numeric\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be numeric\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/anyText",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"anyText"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories contains Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameter should be numeric\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be numeric\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/{{$randomBoolean}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{$randomBoolean}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories contains Cyrillic symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameter should be numeric\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage1 = \"Parameter should be numeric\";\r",
									"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/категория",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"категория"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "lecture-2",
			"item": [
				{
					"name": "Teacher actions",
					"item": [
						{
							"name": "Session token teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting teacher token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"teacherToken\", jsonData.accessToken);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameTeacher}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Happy path scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Happy path scenario (all valid inputs)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting courseId as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"courseId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Happy path scenario (checking \"Likes/Dislikes\" appearance) ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Happy path scenario (all valid inputs)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting courseId as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"courseId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Likes presence\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.key(\"likes\");\r",
											"}); // this case is failing since following the Swagger schema we should have this field\r",
											"\r",
											"pm.test(\"Dislikes presence\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.key(\"dislikes\");\r",
											"}); // this case is failing since following the Swagger schema we should have this field\r",
											"\r",
											"// Last 2 checks implemented only here, since if it's not working on happy path scenario, this won't work on negative tests either (and it doesn't work, I've checked it manually)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": {{$randomBoolean}},\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.eql(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "No token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage2 = 'Unauthorized';\r",
											"    pm.expect(jsonData.errors).to.eql(errorMessage2);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}a",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "No body sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Please send required fields: title,categoryId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Please send required fields: title,categoryId\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Please send required fields: title,categoryId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage2 = \"Please send required fields: title,categoryId\";\r",
											"    pm.expect(jsonData.errors[1].msg).to.equal(errorMessage2);\r",
											"})\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage3 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[2].msg).to.equal(errorMessage3);\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"Minimum course title length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage4 = \"Minimum course title length is: 3\";\r",
											"    pm.expect(jsonData.errors[3].msg).to.equal(errorMessage4);\r",
											"})\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage5 = \"You are not allowed to use spaces only\";\r",
											"    pm.expect(jsonData.errors[4].msg).to.equal(errorMessage5);\r",
											"})\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage6 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[5].msg).to.equal(errorMessage6);\r",
											"})\r",
											"\r",
											"pm.test(\"Minimum course description length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage7 = \"Minimum course description length is: 3\";\r",
											"    pm.expect(jsonData.errors[6].msg).to.equal(errorMessage7);\r",
											"})\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage8 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[7].msg).to.equal(errorMessage8);\r",
											"})\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage9 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[8].msg).to.equal(errorMessage9);\r",
											"})\r",
											"\r",
											"pm.test(\"Unable to find category record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage10 = \"Unable to find category record(s)\";\r",
											"    pm.expect(jsonData.errors[9].msg).to.equal(errorMessage10);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title left blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Minimum course title length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Minimum course title length is: 3\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage2 = 'You are not allowed to use spaces only';\r",
											"    pm.expect(jsonData.errors[1].msg).to.eql(errorMessage2);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 2 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Minimum course title length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Minimum course title length is: 3\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 3 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 4 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 99 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random99Symbols = RandomAlphanumericSymbols(99);\r",
											"\r",
											"pm.collectionVariables.set(\"99symbols\", random99Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{99symbols}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 100 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random100Symbols = RandomAlphanumericSymbols(100);\r",
											"\r",
											"pm.collectionVariables.set(\"100symbols\", random100Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{100symbols}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 101 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Maximum course title length is: 100\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Maximum course title length is: 100\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random101Symbols = RandomAlphanumericSymbols(101);\r",
											"\r",
											"pm.collectionVariables.set(\"101symbols\", random101Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{101symbols}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains Boolean value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage2 = \"You are not allowed to use spaces only\";\r",
											"    pm.expect(jsonData.errors[1].msg).to.eql(errorMessage2);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": {{$randomBoolean}},\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains numeric value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage2 = \"You are not allowed to use spaces only\";\r",
											"    pm.expect(jsonData.errors[1].msg).to.eql(errorMessage2);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": 1234,\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title with only spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = 'You are not allowed to use spaces only';\r",
											"    pm.expect(jsonData.errors[0].msg).to.eql(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"    \",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description left blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Minimum course description length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Minimum course description length is: 3\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 2 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Minimum course description length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Minimum course description length is: 3\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 3 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 4 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 499 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random499Symbols = RandomAlphanumericSymbols(499);\r",
											"\r",
											"pm.collectionVariables.set(\"499symbols\", random499Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{499symbols}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 500 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random500Symbols = RandomAlphanumericSymbols(500);\r",
											"\r",
											"pm.collectionVariables.set(\"500symbols\", random500Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{500symbols}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 501 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Maximum course description length is: 500\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Maximum course description length is: 500\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random501Symbols = RandomAlphanumericSymbols(501);\r",
											"\r",
											"pm.collectionVariables.set(\"501symbols\", random501Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{501symbols}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Descritpion contains Boolean value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": {{$randomBoolean}},\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains numeric value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": 1234,\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible left blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": \"\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains \"0\" ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"}); // expected error\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"}) // there's a bug with JS intepretation of this value (function is implemented without strict equal)\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": \"0\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains \"1\"  ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"}); // expected error\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"}) // there's a bug with JS intepretation of this value (function is implemented without strict equal)\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": \"1\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains any number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"}); // expected error\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": 11,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains \"randomBoolean\" ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"}); // expected error\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"}) // there's a bug with JS intepretation of this value (function is implemented without strict equal)\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains random string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": null,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent categoryId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Unable to find category record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find category record(s)\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": 7777\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "ERROR EXPECTED categoryId contains \"3120\" (existing categoryId as string value)  ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"}) // there's a bug with JS intepretation of this value (function is implemented without strict equal) since Schema says we can only send numeric values\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{categoryId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "categoryId contains string value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{$randomBsAdjective}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "categoryId contains Boolean value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{$randomBoolean}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "categoryId contains null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Happy path scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Happy path scenario (all valid inputs)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Happy path scenario (checking \"Likes/Dislikes\" appearance) ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Happy path scenario (all valid inputs)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Likes presence\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.key(\"likes\");\r",
											"}); // this case is failing since following the Swagger schema we should have this field\r",
											"\r",
											"pm.test(\"Dislikes presence\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.key(\"dislikes\");\r",
											"}); // this case is failing since following the Swagger schema we should have this field\r",
											"\r",
											"// Last 2 checks implemented only here, since if it's not working on happy path scenario, this won't work on negative tests either (and it doesn't work, I've checked it manually)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.eql(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "No token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unauthorized\";\r",
											"    pm.expect(jsonData.errors).to.eql(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": {{$randomBoolean}},\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unauthorized\";\r",
											"    pm.expect(jsonData.errors).to.eql(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}a",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": {{$randomBoolean}},\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "No body sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Please send required fields: id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const expectedErrorMessage1 = \"Please send required fields: id\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(expectedErrorMessage1);\r",
											"});\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const expectedErrorMessage2 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[1].msg).to.equal(expectedErrorMessage2);\r",
											"});\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const expectedErrorMessage3 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[2].msg).to.equal(expectedErrorMessage3);\r",
											"});\r",
											"pm.test(\"Minimum course title length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const expectedErrorMessage4 = \"Minimum course title length is: 3\";\r",
											"    pm.expect(jsonData.errors[3].msg).to.equal(expectedErrorMessage4);\r",
											"});\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const expectedErrorMessage5 = \"You are not allowed to use spaces only\";\r",
											"    pm.expect(jsonData.errors[4].msg).to.equal(expectedErrorMessage5);\r",
											"});\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const expectedErrorMessage6 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[5].msg).to.equal(expectedErrorMessage6);\r",
											"});\r",
											"pm.test(\"Minimum course description length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const expectedErrorMessage7 = \"Minimum course description length is: 3\";\r",
											"    pm.expect(jsonData.errors[6].msg).to.equal(expectedErrorMessage7);\r",
											"});\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const expectedErrorMessage8 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[7].msg).to.equal(expectedErrorMessage8);\r",
											"});\r",
											"pm.test(\"Unable to find category record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const expectedErrorMessage9 = \"Unable to find category record(s)\";\r",
											"    pm.expect(jsonData.errors[8].msg).to.equal(expectedErrorMessage9);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title left blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Minimum course title length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Minimum course title length is: 3\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage2 = 'You are not allowed to use spaces only';\r",
											"    pm.expect(jsonData.errors[1].msg).to.eql(errorMessage2);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 2 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Minimum course title length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Minimum course title length is: 3\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 3 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 4 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 99 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random99Symbols = RandomAlphanumericSymbols(99);\r",
											"\r",
											"pm.collectionVariables.set(\"99symbols\", random99Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{99symbols}}\",\r\n  \"description\": \"{{$randomCatchPhrase}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 100 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random100Symbols = RandomAlphanumericSymbols(100);\r",
											"\r",
											"pm.collectionVariables.set(\"100symbols\", random100Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{100symbols}}\",\r\n  \"description\": \"{{$randomCatchPhrase}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains 101 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Maximum course title length is: 100\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Maximum course title length is: 100\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random101Symbols = RandomAlphanumericSymbols(101);\r",
											"\r",
											"pm.collectionVariables.set(\"101symbols\", random101Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{101symbols}}\",\r\n  \"description\": \"{{$randomCatchPhrase}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains Boolean value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage2 = \"You are not allowed to use spaces only\";\r",
											"    pm.expect(jsonData.errors[1].msg).to.eql(errorMessage2);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": {{$randomBoolean}},\r\n  \"description\": \"{{$randomCatchPhrase}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title contains numeric value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage2 = \"You are not allowed to use spaces only\";\r",
											"    pm.expect(jsonData.errors[1].msg).to.eql(errorMessage2);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": 1234,\r\n  \"description\": \"{{$randomCatchPhrase}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title with only spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = 'You are not allowed to use spaces only';\r",
											"    pm.expect(jsonData.errors[0].msg).to.eql(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"    \",\r\n  \"description\": \"{{$randomCatchPhrase}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description left blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"You are not allowed to use spaces only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"You are not allowed to use spaces only\";\r",
											"    pm.expect(jsonData.errors[1].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Minimum course description length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Minimum course description length is: 3\";\r",
											"    pm.expect(jsonData.errors[2].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": {{$randomBoolean}},\r\n  \"description\": \"\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 2 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Minimum course description length is: 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Minimum course description length is: 3\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 3 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 4 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 499 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random499Symbols = RandomAlphanumericSymbols(499);\r",
											"\r",
											"pm.collectionVariables.set(\"499symbols\", random499Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{499symbols}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 500 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random500Symbols = RandomAlphanumericSymbols(500);\r",
											"\r",
											"pm.collectionVariables.set(\"500symbols\", random500Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{500symbols}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains 501 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Maximum course description length is: 500\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Maximum course description length is: 500\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random501Symbols = RandomAlphanumericSymbols(501);\r",
											"\r",
											"pm.collectionVariables.set(\"501symbols\", random501Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{501symbols}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Descritpion contains Boolean value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": {{$randomBoolean}},\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description contains numeric value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be a string\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be a string\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": 1234,\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible left blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains \"0\" ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); // expected error\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"}) // there's a bug with JS intepretation of this value (function is implemented without strict equal)\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"0\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseIdDel}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseIdDel}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains \"1\" ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"}); // expected error\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"}) // there's a bug with JS intepretation of this value (function is implemented without strict equal)\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"1\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains any number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"}); // expected error\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": 11,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains \"randomBoolean\" ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"}); // expected error\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"}) // there's a bug with JS intepretation of this value (function is implemented without strict equal)\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains random string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBsAdjective}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Visible contains null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be boolean\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be boolean\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomCatchPhrase}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": null,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent categoryId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Unable to find category record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find category record(s)\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": 7777\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "categoryId contains \"3120\" (existing categoryId as string value)  ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"}) // current error message is wrong (value of the input intepretes as number) \r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{categoryId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "categoryId contains string value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{$randomBsAdjective}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "categoryId contains Boolean value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{$randomBoolean}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "categoryId contains null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{courseId}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent courseId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Unable to find category record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 90000,\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "courseId  contains \"6463\" (existing courseId as string value) ERROR EXPECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"}) // current error message is wrong (value of the input intepretes as number) \r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6463\",\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "courseId contains string value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{$randomCatchPhrase}}\",\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "courseId contains Boolean value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{$randomBoolean}},\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "courseId contains null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Parameter should be numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Parameter should be numeric\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": null,\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating data to DEL method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting teacher token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"courseIdDel\", jsonData.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Happy path scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseIdDel}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseIdDel}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating data to DEL method #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting teacher token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"courseIdDel\", jsonData.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message check #1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unauthorized\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}awq",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseIdDel}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseIdDel}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating data to DEL method #3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting teacher token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"courseIdDel\", jsonData.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAdjective}}\",\r\n  \"visible\": \"{{$randomBoolean}}\",\r\n  \"categoryId\": {{categoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "No token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unauthorized\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseIdDel}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseIdDel}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Boolean ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{$randomBoolean}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{$randomBoolean}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Latin ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{$randomAdjective}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{$randomAdjective}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/3333",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"3333"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID=0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/0",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID=1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID=2147483646",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/2147483646",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"2147483646"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID=2147483647",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/2147483647",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"2147483647"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID=2147483648",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"value \\\"2147483648\\\" is out of range for type integer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"value \\\"2147483648\\\" is out of range for type integer\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/2147483648",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"2147483648"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Student actions",
					"item": [
						{
							"name": "Session token student",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting student token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"studentToken\", jsonData.accessToken);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameStudent}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Happy path scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "No token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unauthorized\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unauthorized\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}a",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.equal(errorMessage1);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Happy path scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.equal(errorMessage1);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{$randomInt}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{$randomInt}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unauthorized\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}a",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{$randomInt}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{$randomInt}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unauthorized\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{$randomInt}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{$randomInt}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Boolean ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{$randomBoolean}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{$randomBoolean}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Latin ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{$randomAdjective}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{$randomAdjective}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/55555",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"55555"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID = -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"There is no such endpoint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"There is no such endpoint! Please check the requested URL or Method. API docs can be found at /api/v1/api-docs\";\r",
											"    pm.expect(jsonData.error).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID = 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"// error message is expected, since there's no item with this ID in DB, this is a boundary value check\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/0",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID = 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"// error message is expected, since there's no item with this ID in DB, this is a boundary value check\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID=2147483646",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"// error message is expected, since there's no item with this ID in DB, this is a boundary value check\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/2147483646",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"2147483646"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID=2147483647",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"// error message is expected, since there's no item with this ID in DB, this is a boundary value check\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/2147483647",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"2147483647"
									]
								}
							},
							"response": []
						},
						{
							"name": "ID=2147483648",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message check #1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors).to.equal(errorMessage1);\r",
											"}) // this check came from DEL endpoint, but since GET is just checking the availability of id, but not writing it, so it's OK"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/2147483648",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"2147483648"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "lecture-3",
			"item": [
				{
					"name": "e2e scenario #1",
					"item": [
						{
							"name": "Session token admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting admin token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"adminToken\", jsonData.accessToken);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameAdmin}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting username as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eUsernameAdmin\", jsonData.username);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function Random20Symbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random20Symbols = Random20Symbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
											"\r",
											"\r",
											"function RandomPassword(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const randomPass = RandomPassword(10);\r",
											"\r",
											"pm.collectionVariables.set(\"e2ePasswordAdmin\", randomPass);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{e2ePasswordAdmin}}\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Session token for new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting admin token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eAdminToken\", jsonData.accessToken);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2eUsernameAdmin}}\",\r\n    \"password\": \"{{e2ePasswordAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting categoryId as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eCategoryId\", jsonData.id);\r",
											"})\r",
											"\r",
											"pm.test(\"Setting categoryTitle as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eCategoryTitle\", jsonData.title);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random20Symbols = RandomAlphanumericSymbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"20symbols\", random20Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{20symbols}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Id is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const categoryId = pm.collectionVariables.get(\"e2eCategoryId\");\r",
											"    pm.expect(jsonData.id).to.eql(categoryId);\r",
											"})\r",
											"\r",
											"pm.test(\"Title is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const categoryTitle = pm.collectionVariables.get(\"e2eCategoryTitle\");\r",
											"    pm.expect(jsonData.title).to.eql(categoryTitle);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{e2eCategoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{e2eCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a course in the created category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting courseId as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eCourseId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting courseTitle as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eCourseTitle\", jsonData.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random20Symbols = RandomAlphanumericSymbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"20symbols\", random20Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{20symbols}}\",\r\n  \"description\": \"{{20symbols}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{e2eCategoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking new course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Id is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const courseId = pm.collectionVariables.get(\"e2eCourseId\");\r",
											"    pm.expect(jsonData.id).to.eql(courseId);\r",
											"})\r",
											"\r",
											"pm.test(\"Title is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const courseTitle = pm.collectionVariables.get(\"e2eCourseTitle\");\r",
											"    pm.expect(jsonData.title).to.eql(courseTitle);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleting new course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Id is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const resultmsg = \"Success: record was removed.\";\r",
											"    pm.expect(jsonData.result).to.eql(resultmsg);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Unable to find course record(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage = \"Unable to find course record(s)\";\r",
											"    pm.expect(jsonData.errors).to.eql(errorMessage);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "- creating admin user with admin creds\n    \n- logging in as new admin\n    \n- creating category\n    \n- checking category\n    \n- creating a course for chosen category\n    \n- checking creation\n    \n- deleting course\n    \n- checking deletion"
				},
				{
					"name": "e2e scenario #2",
					"item": [
						{
							"name": "Session token admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting admin token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"adminToken\", jsonData.accessToken);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameAdmin}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting username as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eUsernameAdmin\", jsonData.username);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function Random20Symbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random20Symbols = Random20Symbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
											"\r",
											"\r",
											"function RandomPassword(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const randomPass = RandomPassword(10);\r",
											"\r",
											"pm.collectionVariables.set(\"e2ePasswordAdmin\", randomPass);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{random20symbols}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{e2ePasswordAdmin}}\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Session token for new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting admin token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eAdminToken\", jsonData.accessToken);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2eUsernameAdmin}}\",\r\n    \"password\": \"{{e2ePasswordAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting categoryId as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eCategoryId\", jsonData.id);\r",
											"})\r",
											"\r",
											"pm.test(\"Setting categoryTitle as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eCategoryTitle\", jsonData.title);\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random20Symbols = RandomAlphanumericSymbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"20symbols\", random20Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{20symbols}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Id is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const categoryId = pm.collectionVariables.get(\"e2eCategoryId\");\r",
											"    pm.expect(jsonData.id).to.eql(categoryId);\r",
											"})\r",
											"\r",
											"pm.test(\"Title is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const categoryTitle = pm.collectionVariables.get(\"e2eCategoryTitle\");\r",
											"    pm.expect(jsonData.title).to.eql(categoryTitle);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{e2eCategoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{e2eCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a course in the created category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting courseId as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eCourseId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting courseTitle as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eCourseTitle\", jsonData.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random20Symbols = RandomAlphanumericSymbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"20symbols\", random20Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{20symbols}}\",\r\n  \"description\": \"{{20symbols}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{e2eCategoryId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking new course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Id is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const courseId = pm.collectionVariables.get(\"e2eCourseId\");\r",
											"    pm.expect(jsonData.id).to.eql(courseId);\r",
											"})\r",
											"\r",
											"pm.test(\"Title is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const courseTitle = pm.collectionVariables.get(\"e2eCourseTitle\");\r",
											"    pm.expect(jsonData.title).to.eql(courseTitle);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding material to course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting materialId as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eMaterialId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting materialTitle as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eMaterialTitle\", jsonData.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function RandomAlphanumericSymbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random20Symbols = RandomAlphanumericSymbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"20symbols\", random20Symbols);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{20symbols}}\",\r\n  \"data\": \"{{20symbols}}\",\r\n  \"order\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking material",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Id is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const materialId = pm.collectionVariables.get(\"e2eMaterialId\");\r",
											"    pm.expect(jsonData.id).to.eql(materialId);\r",
											"})\r",
											"\r",
											"pm.test(\"Title is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const materialTitle = pm.collectionVariables.get(\"e2eMaterialTitle\");\r",
											"    pm.expect(jsonData.title).to.eql(materialTitle);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}/materials/{{e2eMaterialId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}",
										"materials",
										"{{e2eMaterialId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Removing material",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}/materials/{{e2eMaterialId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}",
										"materials",
										"{{e2eMaterialId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking material removing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"The material could not be found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const errorMessage1 = \"Unable to find material record(s)\";\r",
											"    pm.expect(jsonData.errors[0].msg).to.equal(errorMessage1);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}/materials/{{e2eMaterialId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}",
										"materials",
										"{{e2eMaterialId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "- creating admin user\n    \n- logging in as created admin\n    \n- adding category\n    \n- checking category\n    \n- adding course\n    \n- checking course\n    \n- adding material to course\n    \n- checking the material\n    \n- deleting the material\n    \n- checking deletion"
				},
				{
					"name": "e2e scenario #3",
					"item": [
						{
							"name": "Session token student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting student token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"studentToken\", jsonData.accessToken);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameStudent}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating \"student\" as student Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting userId as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eUserId\", jsonData.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function Random20Symbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random20Symbols = Random20Symbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
											"\r",
											"\r",
											"function Random20Symbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const again20Symbols = Random20Symbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"e2eUsernameStudent\", again20Symbols);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2eUsernameStudent}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{password}}\",\r\n    \"role\": \"student\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Session token for new student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting student token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eStudentToken\", jsonData.accessToken);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2eUsernameStudent}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enrolling to the course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"You've successfully enrolled the course\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"You've successfully enrolled the course\");\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eStudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}/enroll",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking the enrollment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"userId is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const uuId = pm.collectionVariables.get(\"e2eUserId\");\r",
											"    pm.expect(jsonData[0].userId).to.eql(uuId);\r",
											"})\r",
											"\r",
											"pm.test(\"courseId is matching\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const curCourseId = pm.collectionVariables.get(\"e2eCourseId\");\r",
											"    pm.expect(jsonData[0].courseId).to.eql(curCourseId);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eStudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/mine",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"mine"
									]
								}
							},
							"response": []
						},
						{
							"name": "Leaving the course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"You've successfully left the course\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"You've successfully left the course\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eStudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{e2eCourseId}}/leave",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{e2eCourseId}}",
										"leave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking the abandoning of the course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"The enrollment is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.eql([]);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{e2eStudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/mine",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"mine"
									]
								}
							},
							"response": []
						}
					],
					"description": "- Creating student account\n    \n- Logging in with stud credentials (save token)\n    \n- enrolling to the selected course\n    \n- checking enrolled courses for student\n    \n- leaving course"
				},
				{
					"name": "e2e scenario #4",
					"item": [
						{
							"name": "Session token admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting admin token as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"adminToken\", jsonData.accessToken);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameAdmin}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating \"student\" user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Setting userId as collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"e2eUserId\", jsonData.id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function Random20Symbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const random20Symbols = Random20Symbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"random20symbols\", random20Symbols);\r",
											"\r",
											"\r",
											"function Random20Symbols(length) {\r",
											"  const symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * symbols.length);\r",
											"    result += symbols.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const again20Symbols = Random20Symbols(20);\r",
											"\r",
											"pm.collectionVariables.set(\"e2eUsernameStudent\", again20Symbols);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{e2eUsernameStudent}}\",\r\n    \"firstName\": \"{{random20symbols}}\",\r\n    \"lastName\": \"{{random20symbols}}\",\r\n    \"email\": \"{{random20symbols}}@quantori.academy\",\r\n    \"password\": \"{{password}}\",\r\n    \"role\": \"student\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ban user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Id is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const bannedUserId = pm.collectionVariables.get(\"e2eUserId\");\r",
											"    pm.expect(jsonData.userId).to.eql(bannedUserId);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reason\": \"bad testing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/change-user-ban?userId={{e2eUserId}}&ban=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"change-user-ban"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{e2eUserId}}"
										},
										{
											"key": "ban",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List of banned users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"courseId is matching\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const curUserId = pm.collectionVariables.get(\"e2eUserId\");\r",
											"    \r",
											"    var userIdFound = false;\r",
											"\r",
											"\r",
											"    for (var i = 0; i < jsonData.length; i++) {\r",
											"        var currentElementUserId = jsonData[i].userId;\r",
											"\r",
											"        if (currentElementUserId === parseInt(curUserId)) {\r",
											"            userIdFound = true;\r",
											"            break; \r",
											"        }\r",
											"    }\r",
											"\r",
											"    pm.expect(userIdFound).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/banned-users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"banned-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unban user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Id is found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const bannedUserId = pm.collectionVariables.get(\"e2eUserId\");\r",
											"    pm.expect(jsonData.userId).to.eql(bannedUserId);\r",
											"})\r",
											"\r",
											"pm.test(\"User successfully unbanned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"User successfully unbanned\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reason\": \"bad testing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/change-user-ban?userId={{e2eUserId}}&ban=false",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"change-user-ban"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{e2eUserId}}"
										},
										{
											"key": "ban",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://qa-school-test-api.quantori.academy"
		},
		{
			"key": "usernameTeacher",
			"value": "ManokhinTeacher",
			"type": "string"
		},
		{
			"key": "usernameStudent",
			"value": "ManokhinStudent",
			"type": "string"
		},
		{
			"key": "usernameAdmin",
			"value": "kostyalele",
			"type": "string"
		},
		{
			"key": "password",
			"value": "$wing935TpoL78",
			"type": "string"
		},
		{
			"key": "studentToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMDAsInJvbGVJZCI6MSwiaWF0IjoxNjkzNzQzODg2LCJleHAiOjE2OTM3NTEwODZ9.xFW8-Q4jWiWZLw0atZTQ8ip-7DCmcAOO7f4W5mVz6lo",
			"type": "string"
		},
		{
			"key": "teacherToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjExOTksInJvbGVJZCI6MiwiaWF0IjoxNjkzNzAyNzE1LCJleHAiOjE2OTM3MDk5MTV9.mG7WvGIaXBRaGBbxDGlEyauoZWWJc8gVwtF1iq0PqS4",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEwNDgsInJvbGVJZCI6MywiaWF0IjoxNjkzNzQ0MTg1LCJleHAiOjE2OTM3NTEzODV9.P3GpMHGGFVv9Kqc3zpwsrV91WxseCWdt9_dunNfyzsI",
			"type": "string"
		},
		{
			"key": "courseId",
			"value": ""
		},
		{
			"key": "99symbols",
			"value": ""
		},
		{
			"key": "100symbols",
			"value": ""
		},
		{
			"key": "101symbols",
			"value": ""
		},
		{
			"key": "499symbols",
			"value": ""
		},
		{
			"key": "500symbols",
			"value": ""
		},
		{
			"key": "501symbols",
			"value": ""
		},
		{
			"key": "courseIdDel",
			"value": ""
		},
		{
			"key": "categoryId",
			"value": ""
		},
		{
			"key": "254symbols",
			"value": ""
		},
		{
			"key": "255symbols",
			"value": ""
		},
		{
			"key": "256symbols",
			"value": ""
		},
		{
			"key": "random20symbols",
			"value": ""
		},
		{
			"key": "randomNumericsymbols",
			"value": ""
		},
		{
			"key": "63symbols",
			"value": ""
		},
		{
			"key": "64symbols",
			"value": ""
		},
		{
			"key": "65symbols",
			"value": ""
		},
		{
			"key": "random7symbols",
			"value": ""
		},
		{
			"key": "random8symbols",
			"value": ""
		},
		{
			"key": "random9symbols",
			"value": ""
		},
		{
			"key": "random19symbols",
			"value": ""
		},
		{
			"key": "20symbols",
			"value": ""
		},
		{
			"key": "random21symbols",
			"value": ""
		},
		{
			"key": "3symbols",
			"value": ""
		},
		{
			"key": "5symbols",
			"value": ""
		},
		{
			"key": "e2eUsernameAdmin",
			"value": ""
		},
		{
			"key": "e2ePasswordAdmin",
			"value": ""
		},
		{
			"key": "e2eAdminToken",
			"value": ""
		},
		{
			"key": "e2eCategoryId",
			"value": ""
		},
		{
			"key": "e2eCategoryTitle",
			"value": ""
		},
		{
			"key": "e2eCourseId",
			"value": ""
		},
		{
			"key": "e2eCourseTitle",
			"value": ""
		},
		{
			"key": "e2eMaterialId",
			"value": ""
		},
		{
			"key": "e2eMaterialTitle",
			"value": ""
		},
		{
			"key": "e2eUsernameStudent",
			"value": ""
		},
		{
			"key": "e2eUserId",
			"value": ""
		},
		{
			"key": "e2eStudentToken",
			"value": ""
		}
	]
}